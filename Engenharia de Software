************************________UNIDADE I________*************************

🌸 ===== Sobre a Engenharia de Software ===== 🌸

    🎈 Tempo atrás os softwares eram pequenos e a preocupaçao existia somente em cima do hardware. E o software era algo secundario.

    🎈 Com a complexidade dos softwares começaram a refletir no gerenciamento das empresas, logo adotou-se a parte da engenharia para gerenciar processos, metrifica-los, tendo total controle.

🌸 ==== Definiçao software ==== 🌸

    🎈 Software: todos os programas de computador, estrutura de dados e documentaçao que servem para efetivar o método, processo ou controle lógico necessário.

    🎈 Hardware: dispositivos eletronicos que fornecem a capacidade ao computador e dispositivos eletromecanicos que oferecem funçoes ao mundo externo.

    🎈 Pessoas: usuarios e operadores de hardware e software.

    🎈 Banco de dados: uma grande e organizada coleçao de informaçoes a que se tem acesso pelo software e é parte integrante da funçao do sistema.

    🎈 Documentaçao: manuais, formularos e outras infos descritivas que retratam o uso do sistema.

    🎈 Procedimentos: os passos que definem o uso especificos de cada elemento do sistema ou o contexto processual em que o sistema reside.

🌸 ===== PRODUTO ===== 🌸

    🎈 O software deve ser visto como um sistema que se transforma em produto a ser desenvolvido para ser vendido.
    🎈 O software é abstrato, temos que vender algo abstrato mas que tenha qualidade, que eu consiga ver todos os passos e validar a sua qualidade, acompanhar seu crescimento em busca de um produto com alta qualidade.
    
    ✨ Engenharia de software e produto de software ✨

        💡 Engenharia de software é uma disciplina do ramo da engenharia que tem como foco os aspectos da produção de software.
        💡 Um produto de software é sistematicamente destinado ao uso por pessoas com diferentes formaçoes e experiencias, por isso precisamos dar atençao nao só para as caracteristicas de desenvolvimento, mas também de interface, documentaçao e etc.

            🍰 Segundo Sommerville, existe 2 tipos de produtos de softwares: 🍰
                
                🍬 Produtos genericos: atende uma grande demanda, um software generico, sistemas stand-alone, produzidos por uma organizaçao de desenvolvimento e vendidos no mercado para qualquer cliente que deseja utiliza-los. Ex: ferramentos de banco de dados, processadores e texto etc.

                🍬 Produtos sob encomenda: sistemas desenvolvidos para um cliente em particular. É um produto que é especifico para lidar com um problema especifico de alguma empresa que a contratou. Ex: sistemas de controle de trafego aereo. 

        💡 O produto de software é concebido e desenvolvido como resultado de um trabalho de engenharia e nao manufaturado no sentido classico.

        💡 O produto de software nao se desgasta, nao é o tempo que vai desgastar o software, no caso de um equipamento o tempo influencia, condiçoes climaticas, condiçoes de uso... O que pode acontecer é ele se tornar obsoleto e suas funcionalidades nao mais satisfazerem a necessidade do usuario, ou seja, softwares nao se desgastam mas sim, deterioram-se.

        💡 A maioria dos produtos de software é concebida inteiramente sob medida. Por causa disso, de caracteristicas diferenciais, o processo de desenvolvimento deproduto de software gera um conjunto de dificuldades, os quais possuem influencia direta na qualidade final do produto.

        💡 ES é uma abordagem sistematica para produçao de software; ela analisa questoes praticas de custo, prazo e confiança, assim como as necessdades dos clientes e produtos do software.

            🍰 Segundo Sommerville, existem diferentes tipos de software comercializados:
                
                🍬 Stand-alone(softwares que rodam em uma maquina unica, nao é conectado a internet, rede ou outra máquina):

                    🍦 Aplicaçoes interativas baseadas em transaçoes:
                        São executadas num computador remoto
                            (Ex: software de email);

                    🍦 Sistemas de controle embutido:
                        Aplicações que controlam e gerenciam dispositivos de hardware
                            (Ex: softwares de microondas, de celular, etc);

                    🍦 Sistemas de processamento em lotes:
                        Aplicaçoes corporativas desenvolvidas para processar grandes quantidades de informaçoes
                            (Ex: bancos, sistemas de cobranças telefonicas);

                    🍦 Sistemas de entretenimento:
                        Aplicaçoes relacionadas a diversao
                            (Ex: jogos);

                    🍦 Sistemas para modelagem e simulaçao:
                        Desenvolvidos por cientistas, compostos por varios objetos que podem ser combinados entre si
                            (Ex: ambientes de simulaçao).

            🍰 Conceitos fundamentais comuns:

                🍬 Todo produto de software deve ser desenvolvido em um processo gerenciado e compreendido;
                🍬 Todos os produtos devem possuir caracteristicas como confiança e desempenho adequado, ou seja, devem se comportar conforme o esperado, sem falhas;
                🍬 É fundamental entender e gerenciar todos os requisitos do sistema a fim de garantir que o produto final seja o esperado;
                🍬 Voce deve fazer o melhor uso possivel dos recursos existentes e isso ,hoje, significa reutilizar objetos e softwares desenvolvidos ao inves de iniciar o processo do zero;
                🍬 Além disso, ainda temos que considerar a integração com a internet.
        
🌸 ===== REENGENHARIA E ENGENHARIA REVERSA ===== 🌸

    🎈 O conceito de reengenharia está bastante relacionado a manutençao do software. Ela envolve redocumentar, organizar e reestruturar o sistema, traduzir o sistema para uma linguagem de programaçao mais moderna e atualizar a estrutura e os valores dos dados do sistema. Basicamente seria atualizar um software que é antigo para algo mais atual.

    🎈 A engenharia reversa é o processo de analise de um programa, em um esforço para representa-lo em uma abstraçao mais alto do que o codigo fonte. A engenharia reversa é um processo de recuperaçao de projeto.

    🎈 Engenharia reversa e reengenharia nao é a mesma coisa.

    🎈 O objetivo da engenharia reversa é derivar o projeto ou a documentaçao de um sstema a partir de seu codigo fonte.

    🎈 Já o objetivo da reengenharia é produzir um novo sistema com manutençao mais facil. Assim, a engenharia reversa para desenvolver a melhor compreensao de um sistema é com frequenca parte do processo de reengenharia.


************************________UNIDADE II________*************************

🌸 ===== PROCESSOS DE SOFTWARE ===== 🌸

    🎈 Quando falamos sobre processos, estamos falando de uma atividade, uma tarefa, como ela será feita, os procedimentos que ela obdecerá.

    ✨ Existem muitos processos, tais como:

        💡 Especificação: a funcionalidade do software e as restriçoes em sua operaçao devem ser definidas.
        💡 Desenvolvimento: produçao do software em si, de modo que atenda a suas especificaçoes. Aquilo que já foi definido em outro processo.
        💡 Validaçao: o software deve ser valido para garantir que ele faça o que o cliente deseja. Precisa cumprir com tudo o que o cliente pediu, nao pode ter algo a mais, somente o que o cliente deseja.
        💡 Evoluçao: o software deve evoluir para atender as necessidades mutaveis do cliente.

    ✨ ES é uma disciplina que reune procedimentos(metodologias), métodos e ferramentas a serem utilizadas:

        💡 MÉTODOS: Proporcionam os detalhes de como fazer para construir o software(gerenciamento do projeto, analise de sistemas, analise de requisito, projeto do software, geraçao do código, teste, manutençao e etc).

        💡 FERRAMENTAS: dao suporte automatizado aos metodos. Existem atualmente ferramentas para sustenar cada um dos metodos. Quando as ferramentas sao integradas, é estabelecido um sistema de suporte ao desenvolvimento de software chamado CASE - Computer Aided Software Engineering.

        💡 PROCEDIMENTOS: constituem o elo entre os metodos e ferramentas. Estao relacionados a sequencia em que os metodos serao aplicados aos produtos de software. Por meio dos procedimentos ocorrem controles que asseguram a qualidade e coordenam as alteraçoes, além de permitirem marcos de referencia que possibilitam a administraçao do progresso do produto de software

        💡 Processo de software significa as tarefas que são necessarias para construir softwares de qualidade.

🌸 ===== MODELOS DE DESENVOLVIMENTO DE SOFTWARE(Paradigmas de software)
    
    🎈 Paradigma da Engenharia de Software: representa a abordagem ou filosofia em particular para a construção de software.

    🎈 O modelo de processo de desenvolvimento corresponde ao conjunto e ao ordenamento de atividades de modo a que o produto desejado seja obtido.

    ✨ Modelo de desenvolvimento: Corresponde a uma representação abstrata do processo de desenvolvimento que vai definir como as etapas da criação do software serao conduzidas e inter-relacionadas para atingir o objetivo que é a obtenção de um produto de software de alta qualidade a um custo relativamente baixo. Boa na parte de entrevista, reuniões, muito utilizado para esclarecer duvidas sobre o meu projeto.


        💡 Sequencial Linear:
            🍰 Modelo Cascata ou Ciclo de Vida Clássico: 
                🍬 Modelo simples, estabelece uma ordenação linear referente a realização das diferentes etapas. Ele é o modelo mais antigo e o mais amplamente usado da engenharia de software por ter sido modelado em função do ciclo da engenharia convencional. Uma tarefa chama a outra, uma por uma. Aqui é interessante que sempre vai ter um loop entre cada tarefa, caso tenha algum problema sempre irá voltar para cada passo para ser refeito. Muito cuidado pois voltar as tarefas é um custo grande.

            🍰 Prototipação: Previsão do produto, um 'esboço'.

            🍰 O modelo RAD(Rapid Application Development)

        💡 Modelos Evolutivos de Processo de Software: Existe situações que a ES necessita de um modelo de processo que possa acomodar um produto que evolui com o tempo.

            🍰 O modelo incremental:
                🍬 Parecido com o modelo de prototipação, foi criado a partir da exploração das limitações do modelo cascata, ao mesmo tempo em que combina as vantagens do modelo cascata com as do de Prototipação. Basicamente são versoes.

            🍰 O modelo espiral:
                🍬 Dividido em uma serie de atividades de trabalho ou regioes de tarefas. Existem tipicamente de 3 a 6 regioes ou setores de tarefa. Quadrante de analise de riscos, quadrante do desenvolver o produto e o nivel do produto, quadrante das proximas etapas do plano e quadrante dos objetivos, alternativas e restrições

            🍰 O modelo de Montagem de Componentes:
                🍬 Incorpora caracteristicas de POO no modelo espiral, é de natureza evolutiva e demanda uma abordagem iterativa para a criação do software.

            🍰 O modelo de Desenvolvimento Concorrente

        💡 Modelos de Métodos Formais
        💡 Técnicas de quarta geração

        💡 Métodos ágeis: Muito aplicado no mercado, se aplica quando se tem um projeto pequeno e conduzimos com mais facilidade.

            🍰 Extreme Programming(XP):
                🍬 O analista, o cliente e o programador ficam juntos durante o projeto, fazem tudo junto. O analista descreve os requisitos junto com o cliente, o programador efetua e o validade se é isso o que ele queria, no final o analista confere

🌸 ===== CONCLUSÃO ===== 🌸
    🎈 As fases do processo de software são complementadas por uma série de atividades de apoio. Essas atividades são aplicadas durante toda a ES.
    
        💡 São elas: métricas, gerenciamento de riscos, acompanhamento e controle do projeto de software, garantia de qualidade de software, gerenciamento de configuração de software.

************************________UNIDADE III________*************************

🌸 ===== PLANEJAMENTO E GERENCIAMENTO DE PROJETOS ===== 🌸

    🎈 O software precisa ser gerenciado, planejado, executado, finalizado e um controle para dar vida a um software.

    🎈 Acompanhamento do processo: Pode ser vista como uma atividade que abrange todo o processo de desenvolvimento. Possibilita compreender o escopo do trabalho, riscos, recursos exigidos, tarefas a executar, programação(cronograma) a ser seguido, esforço despendido e etc.

      ✨ Um software é util somente se realizar uma função desejada ou fornecer um serviço necessário. Por isso, os projetos sempre se iniciam quando um cliente tem alguma necessidade e ele faz um pedido para criação de um sistema para arrumar esse problema.

    🎈 Perguntas na reunião/entrevista com o cliente:
        💡 Voce entendeu o que eu quero?
        💡 Voce pode projetar esse sistema?
        💡 Quanto tempo levará para projeta-lo?
        💡 Quanto vai custar esse desenvolvimento?

    🎈 Estimativas: estimar um cronomogra é uma das tarefas mais dificeis de realizar na etapa de planejamento. São varios aspectos a serem pensados:
        💡 Disponibilidade de recursos no momento da execução de uma tarefa
        💡 Interdependencias das diferentes tarefas
        💡 Ocorrencia de possiveis imprevistos
        💡 Feriados, crises no brasil
    
    🎈 Razoes para estimativas imprecisas:
        💡 Frequente solicitaçao de mudança pelos usuarios.
        💡 Tarefas negligenciadas
        💡 Falta de entendidmento do usuario sobre suas proprias exigencias
        💡 Analise insuficiente no desenvolvimento de uma estimativa
        💡 Falta de coordenação do desenvolvimento
        💡 Complexidade do sistema proposto
        💡 Necessidade de integraçao com os sistemas existentes
        💡 Experiencia da equipe com o hardware
        💡 Disponibilidade de ferramentas, tais como geradores de aplicação
        💡 Capacidade e experiencia da equipe do projeto.

    🎈 Estimativa de esforço: Relacionada ao numero de pessoas/dias para desenvolver o projeto dentro do cronograma estipulado. O esforço é o componente de custo de maior grau de incerteza, pois capacitação, experiencia, interesse e treinamento podem influir no tempo de execução de uma tarefa.
    
🌸 ===== ANALISE DE RISCOS ===== 🌸

    🎈 Analise de riscos é uma das atividades essenciais para o bom encaminhamento de um projeto de software e, consequenctemente da sua gerencia.

    ✨ Essa atividade está baseada na realização de 4 tarefas, conduzidas de forma sequencial:
        💡 Identificação dos riscos: Quais sao os riscos possiveis q podem acontecer?
        💡 Projeção dos riscos: O que isso influencia no final do nosso projeto?
        💡 Avaliação dos riscos.
        💡 Administração e monitoramento dos riscos.

🌸 ===== PLANO DE SOFTWARE ===== 🌸

    🎈 Ao final da etapa de estimativa, de discussao sobre riscos e equipe está prevista a criaçao de um documento chamado de Plano de Software(PS), o qual deverá ser revisto para servir de referencia as etapas posteriores.
    Servirá como plano de açao para as proximas etapas.

    🎈 Todo PS deve, dentre outras, conter as seguintes informações:
        💡 O contexto e a descrição dos recursos necessários para a efetiva gestão do projeto.
        💡 A definição de custos e cronograma que serão acompanhados na gestão do projeto.
        💡 A visão global do processo de desenvolvimento do software.

    ✨ Plano do projeto: Para comunicarmos a analise e o gerenciamento de riscos, a estimativa de custo, tempo e esforço, assim como a equipe e as diretrizes de manutenção, garantia e qualidade do sistema, é necessario criarmos um Plano de Projeto(PP).
        💡 O plano descreve as necessidades do cliente, assim como está sendo idealizada a execução dessas atividades.

    ✨ Um bom plano de projeto inclui:
        💡 Escopo do projeto: descrição geral do projeto
        💡 Plano de Software: informações que servirá de documentação para as etapas posteriores.
        💡 Descrição técnica, procedimentos e ferramentas propostas para o projeto: definição de requisitos e modelagem.
        💡 Plano de garantia da qualidade: definição das estrategias para garantia da qualidade do software.
        💡 Plano de gerencia de configuraçoes: definição das estratégias para gerenciar as alteraçoes de software.
        💡 Plano de documentaçao.
        💡 Plano de gerencia de dados: plano de gerenciamento de dados e integraçao de BD.
        💡 Plano de gerencia de recursos: plano de gerenciamento de recursos de desenvolvimento(pessoa, tecnico etc)
        💡 Plano de testes
        💡 Plano de treinamento
        💡 Plano de segurança
        💡 Plano de gerencia de riscos
        💡 Plano de manutenção

    ✨ Os processos se enquadram em duas categorias:
        💡 Processos da gerencia de projetos:
            🍰 Se relacionam com a descrição, a organização e a conclusão do trabalho do projeto. São universais a todos os projetos, pois controlam o ciclo de vida do gerenciamento de projetos. Tudo da parte do ciclo de vida.

        💡 Processos orientados ao produto:
            🍰 Se relacionam com a especificação e a criação do produto do projeto, sendo exclusivos a cada produto. São definidos pelo ciclo de vida do projeto, e variam de acordo com a area de aplicação. Tudo da parte do ciclo de vida do meu produto.

************************________UNIDADE IV________*************************

🌸 ===== ENGENHARIA DE REQUISITOS E GERENCIAMENTO DE PROJETOS ===== 🌸

    ✨ Requisitos: É a condição necessária para a obtenção de certo objetivo, ou para o preenchimento de certo objetivo. Todo processo de analise relacionada nessa etapa define dois tipos de requisitos: Funcionais e não funcionais.

        💡 Especificação: é a descrição minuciosa das caracteristicas que um material, uma obrga, ou um serviçao deverá apresentar. É diferente d requisito e as duas atividades juntas nos ajudam a melhorar a descriçao dos objetivos do projeto.
    
    ✨ Como obter os requisitos?: Existem varias formas mas uma forma adequada é dividir o projeto em parte e definir quem teria as informaçoes adequadas de forma a ajudar na definiçao dos requisitos para aquela fase do sistema.

    ✨ Geralmente, por meio de entrevistas e reunioes, juntamos esses requisitos. Durante a conversa é necessario nao deixar passar nenhuma duvida. Ao final, durante o processo de documentaçao dos requisitos eles estao categorizados em 3:

        💡 Requisitos que devem ser totalmente satisfeitos
        💡 Requisitos que sao altamente desejaveis, mas nao sao necessarios
        💡 Requisitos que sao possivel, mas poderiam ser eliminados

    ✨ Tipos de documentos de requisitos

        💡 Definição de requisitos. Ele representa um consenso entre o que o cliente deseja e o que é possivel e será realizado.

        💡 Especificaçoes dos requisitos. Esse documento redefine o anterior para uma linguagem mais tecnica, apropriada para o desenvolvimento do projeto.

🌸 ===== Gerencia de configurações ===== 🌸

    🎈 Conjunto de procedimentos de que controlam:

        💡 Os requisitos que definem o que o sistema fará
        💡 Os modulos de projetos que serao gerados a partir dos requisitos
        💡 O codigo do programa que implementa o projeto
        💡 Os testes que verificam a funcionalidade do sistema
        💡 Os documentos que descrevem o sistema

        ✨ Requisitos funcionais: Descrevem uma interaçao entre o sistema e o ambiente, descrevem como o sistema deve funcionar, considerando determinado estado, declara quais serviços que o sistema deve fornecer, como o sistema deve reagir a entradas especificas e como deve se comportar em determinadas situaçoes. Representa a funcionalidade do software.

            💡 O sistema deve possibilitar o cadastramento dos dados pessoas dos clientes;
            💡 O sistema deve emitir relatorios gerenciais;
            💡 O sistema deve permitir a baixa automatica do estoque quando da venda de um produto.
        
        ✨ Requisitos não funcionais: Em vez de informar o que o sistema fará, requisitos nao funcionais colocam restriçoes no sistema, por isso podem ser chamados de restriçoes.

            💡 Tempo de resposta do sistema não deve ultrapassar 10 segundos;
            💡 Software deve ser operacionalizado no sistema Windows;
            💡 O banco de dados usado deverá ser o Oracle.

🌸🎈🍰✨🍬💡
************************________UNIDADE V________*************************

🌸 ===== Teste e Manutenção de software ===== 🌸

    🎈 Não temos como falar sobre software sem mencionar sobre como a qualidade de um produto de software é importante. Sempre temos que gerenciar ele a fim de obter um produto de alta qualidade.

    ✨ Estratégias de teste:

        💡 Um teste é considerado um comunto de atividades qu deve ser planejado e realizado de forma sistematica. O planejamento e a realização das atividades de teste planejadas fazem parte do que definimos por estratégia de teste de software.

        💡 Testes devem ser realizados desde o inicio, desde o levantamento de requisitos, até o final do produto. Se um problema for diagnosticado cedo, mais facil será de ser arrumado.

        💡 Nenhum produto é testado apenas ao final do seu desenvolvimento, por isso que para cada etapa do processo, é necessaria uma estrategia especifica de teste.

    ✨ Considerando uma estrategia de teste, ela deve:

        💡 Acomodar testes de baixo nivel e teste de alto nivel:

            🍰 Baixo nivel significa que o teste é feito pelos programadores, engenheiros, algo bem especifico.
            🍰 O teste de alto nivel é o mais proximo do usuario, do analista e etc.

        💡 Oferecer orientaçao ao profissional.
        💡 Oferecer um conjunto de marcos de referencia ao administrador do projeto e de cada fase do sistema.
        💡 Ser mensuravel. Existem testes estatisticos que sao utilizados para testar desempenho e confiabilidade do programa para checar como ele trabalha sob determinadas condiçoes operacionais.

        A atividade de teste num produto de software nao é a mesma realizada pela equipe de desenvolvimento, ou seja, já possui alguns vicios que significa que é como se pensasse somente dentro da caixa, o melhor mesmo é pedir a alguém de fora da equipe de desenvolvimento para ter uma nova visão, apontar o teste, o que acontecerá e os tipos de falhas que foram encontradas.

🌸 ===== Validação e Verificação(V&V) ===== 🌸

    🎈 Nome dado aos processos de verificaçao e analise que asseguram que o software cumpra com as especificaçoes e atenda as necessidades dos clientes.

        ✨ Validaçao: refere-se ao conjunto de atividades que garante que o software que foi construido seja rastravel as exigencias do cliente. Basicamente responde a pergunta: Estamos fazendo o produto certo?

        ✨ Verificaçao: refere-se ao conunto de atividades que garante que o software seja construido da forma correta. Basicamente responde a pergunta: estamos fazendo o certo produto?

    🎈 O objetivo principal do V&V é estabelecer um vinculo de confiança entre o sistema de desenvolvimento e o projeto aprovado pelo usuario.

    🎈 O nivel de confiabilidade eigida depende, em grande escala, do proposito do cliente, das expectativas do usuario (que pode ou nao ser a mesma pessoa que o cliente) e o atual ambiente/segmento do mercado no qual o software será utilizado.

    🎈 Testar um software significa experimenta-lo, usando dados reais do usuario e examinar a saida esperada para confirmar anomalias.

        ✨ Existem dois tipos de testes que podem ser utilizados:

            💡 Teste de validação: significa se o produto cumpre com os requisitos já definidos.

            💡 Teste de defeito: verificar se há defeitos, significa que iremos identificar os defeitos, erros, bugs do projeto

🌸 ===== Inspeção de software ===== 🌸

    ✨ Existem 3 vantagens sobre inspeçao de teste:

         💡 Durante os testes, erros podem mascarar(ocultar) outros erros. Uma vez que um erro é descoberto, voce nunca pode estar seguro se outras anomalias de saida sao devidas a um novo erro ou sao efeitos colaterais do erro já descoberto. Uma unica seção de inspeçao pode descobrir varios erros.

         💡 Versoes incompletas de sistemas podem ser inspecionadas sem custos adicionais.

         💡 Assim como procurar defeitos de programa, uma inspeçao pode considerar atributos de qualidade mais amplos como conformidade com padroes, portabildade e facilidade de manutençao. Nesse momento, podem ser localizados, inclusive, algoritmos inapropriados e estilo de programaçao "pobre" que dificultaria o processo de manutençao.

    ✨ Tecnicas ou métodos de testes, devemos lembrar sempre que se tratando de testes:

        💡 Se erros gravse forem encontrados com regularidade, ntao a qualidade e a confiabilidade do software sao suspeitas.

        💡 Se erros facilmente corrigiveis forem encontrados, entao a qualidade e a confiabilidade do software estao aceitaveis, ou os testes sao inadquados para revelar erros graves desse particular software.

        💡 Se nao forem encontrados erros, entao a configuraçao de testes nao foi suficientemente elaborada e os erros estao escondidos no software.

    ✨ Em todo o processo, temos que ter em mente:

        💡 Defeito, num software, é uma deficiencia mecanica ou algoritmica que, se ativada, pode levar a uma falha.

        💡 Falha, num software, é um vento notavel em que o sistema viola suas especificaçoes. Geralmente aparece durante a utilizaçao do produto pelos usuarios.

        💡 Erro, num software, é um item de informaçao ou estado de execuçao inconsistente. Deve ser corrigido durante a fase de manutençao.

    ✨ Toda estrategia de teste é valida, desde que considere a verificaçao de testes de baixo nivel(logica) e testes de alto nivel(usabilidade). Deve oferecer a orientaçao ao profissional, um conjunto de marcos de referencia ao administrador, além de ter seu resultado mensuravel.

    ✨ Teste da caixa preta: Também chamado de teste funcional, é uma abordagem na qual o teste é derivado da especificaçao de programas ou de componentes.

    ✨ O teste procura descobrir erros nas seguintes categorias:

        💡 Funçoes incorretas ou ausentes
        💡 Erros de interface
        💡 Erros nas estruturas de dados ou no acesso a BD externos
        💡 Erros de desempenho
        💡 Erros de inicializaçao e termino.

    ✨ Teste da caixa branca: tem como objetivo determinar defeitos na estrutura interna do produto com tecnicas que eercitem possiveis caminhos e erros de execuçao.
    ✨ Nessa tecnica, sao testados caminhos logicos atrasves do software, fornecendo casos de testes que podem a prova conutos especificos de condiçoes e/ou laços definidos no sistema.
    ✨ É um teste mais especifico, verifica cada parte de algoritmo, hardware, vai até o nivel mais baixo nos testes.

    ✨ Bateria de testes: as politicos de teste podem ser criadas seguindo as seguintes estrategias:

        💡 Teste de unidade
        💡 Teste de integridade
        💡 Teste de validaçao
        💡 Teste de sistema

🌸 ===== Manutençao de software ===== 🌸

    🎈 Podemos dividir em 3 categorias:
        💡 Corretivas
        💡 Adaptativas
        💡 Perfectivas
    🎈 Modificar funçoes existentes
    🎈 Incluir novas funçoes
    🎈 Efetuar melhorias em geral
    🎈 Melhorar a manutenibilidade ou confiabilidade futura e fornecer uma base melhor para posterior aprimoramento.
